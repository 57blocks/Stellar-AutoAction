name: Deploy to Amazon ECS

#run-name: ${{ github.actor }}'s image build and push

on:
  push:
    paths:
      - "server/**"
    branches:
      - staging
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-push:
    name: ECR build and push
    runs-on: ubuntu-latest

    outputs:
      aws_ecr_image_tag: ${{ steps.build-push-step.outputs.aws_ecr_image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true
          registry-type: private

      - name: Build and push
        id: build-push-step
        env:
          AWS_ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          AWS_ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY }}
        run: |
          export AWS_ECR_IMAGE_TAG=$AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$(git rev-parse --short HEAD)
          docker build -f ./server/build/Dockerfile -t $AWS_ECR_IMAGE_TAG ./server
          docker push $AWS_ECR_IMAGE_TAG
          echo "aws_ecr_image_tag=$AWS_ECR_IMAGE_TAG" >> "$GITHUB_OUTPUT"

  ecs-deploy:
    name: ECS deployment
    needs: build-push
    runs-on: ubuntu-latest
    env:
      AWS_ECR_IMAGE_TAG: ${{ needs.build-push.outputs.aws_ecr_image_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Render Amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: server/ecs/task-def.json
          container-name: ${{ vars.AWS_ECS_CONTAINER }}
          image: ${{ env.AWS_ECR_IMAGE_TAG }}
          environment-variables: |
            AWS_REGION=${{ vars.AWS_REGION }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            BOUND_ENDPOINT=${{ vars.BOUND_ENDPOINT }}
            BOUND_NAME=${{ vars.BOUND_NAME }}
            JWT_PROTOCOL=${{ vars.JWT_PROTOCOL }}
            JWT_PRIVATE_KEY=${{ secrets.JWT_PRIVATE_KEY }}
            JWT_PUBLIC_KEY=${{ secrets.JWT_PUBLIC_KEY }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            LOG_ENCODING=${{ vars.LOG_ENCODING }}
            RDS_HOST=${{ vars.RDS_HOST }}
            RDS_PORT=${{ vars.RDS_PORT }}
            RDS_USER=${{ vars.RDS_USER }}
            RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}
            RDS_DATABASE=${{ vars.RDS_DATABASE }}
            RDS_SSLMODE=${{ vars.RDS_SSLMODE }}
            CS_ENDPOINT=${{ vars.CS_ENDPOINT }}
            CS_ORGANIZATION=${{ secrets.CS_ORGANIZATION }}
            CS_ROLE=${{ secrets.CS_ROLE }}
            WALLET_MAX=${{ vars.WALLET_MAX}}
            LAMBDA_MAX=${{ vars.LAMBDA_MAX }}

      - name: Deploy to Amazon ECS task definition
        id: deploy-task-def
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ vars.AWS_ECS_SERVICE }}
          cluster: ${{ vars.AWS_ECS_CLUSTER }}