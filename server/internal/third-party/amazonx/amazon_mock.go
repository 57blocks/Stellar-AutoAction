// Code generated by MockGen. DO NOT EDIT.
// Source: amazon.go

// Package amazonx is a generated GoMock package.
package amazonx

import (
	context "context"
	reflect "reflect"

	cloudwatchlogs "github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs"
	lambda "github.com/aws/aws-sdk-go-v2/service/lambda"
	scheduler "github.com/aws/aws-sdk-go-v2/service/scheduler"
	gomock "github.com/golang/mock/gomock"
)

// MockAmazon is a mock of Amazon interface.
type MockAmazon struct {
	ctrl     *gomock.Controller
	recorder *MockAmazonMockRecorder
}

// MockAmazonMockRecorder is the mock recorder for MockAmazon.
type MockAmazonMockRecorder struct {
	mock *MockAmazon
}

// NewMockAmazon creates a new mock instance.
func NewMockAmazon(ctrl *gomock.Controller) *MockAmazon {
	mock := &MockAmazon{ctrl: ctrl}
	mock.recorder = &MockAmazonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAmazon) EXPECT() *MockAmazonMockRecorder {
	return m.recorder
}

// BoundScheduler mocks base method.
func (m *MockAmazon) BoundScheduler(c context.Context, input *scheduler.CreateScheduleInput, opts ...func(*scheduler.Options)) (*scheduler.CreateScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{c, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BoundScheduler", varargs...)
	ret0, _ := ret[0].(*scheduler.CreateScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BoundScheduler indicates an expected call of BoundScheduler.
func (mr *MockAmazonMockRecorder) BoundScheduler(c, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{c, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BoundScheduler", reflect.TypeOf((*MockAmazon)(nil).BoundScheduler), varargs...)
}

// DescribeLogStreams mocks base method.
func (m *MockAmazon) DescribeLogStreams(c context.Context, input *cloudwatchlogs.DescribeLogStreamsInput) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLogStreams", c, input)
	ret0, _ := ret[0].(*cloudwatchlogs.DescribeLogStreamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLogStreams indicates an expected call of DescribeLogStreams.
func (mr *MockAmazonMockRecorder) DescribeLogStreams(c, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLogStreams", reflect.TypeOf((*MockAmazon)(nil).DescribeLogStreams), c, input)
}

// GetLogEvents mocks base method.
func (m *MockAmazon) GetLogEvents(c context.Context, input *cloudwatchlogs.GetLogEventsInput) (*cloudwatchlogs.GetLogEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogEvents", c, input)
	ret0, _ := ret[0].(*cloudwatchlogs.GetLogEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogEvents indicates an expected call of GetLogEvents.
func (mr *MockAmazonMockRecorder) GetLogEvents(c, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogEvents", reflect.TypeOf((*MockAmazon)(nil).GetLogEvents), c, input)
}

// InvokeLambda mocks base method.
func (m *MockAmazon) InvokeLambda(c context.Context, input *lambda.InvokeInput) (*lambda.InvokeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeLambda", c, input)
	ret0, _ := ret[0].(*lambda.InvokeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeLambda indicates an expected call of InvokeLambda.
func (mr *MockAmazonMockRecorder) InvokeLambda(c, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeLambda", reflect.TypeOf((*MockAmazon)(nil).InvokeLambda), c, input)
}

// RegisterLambda mocks base method.
func (m *MockAmazon) RegisterLambda(c context.Context, input *lambda.CreateFunctionInput, opts ...func(*lambda.Options)) (*lambda.CreateFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{c, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterLambda", varargs...)
	ret0, _ := ret[0].(*lambda.CreateFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterLambda indicates an expected call of RegisterLambda.
func (mr *MockAmazonMockRecorder) RegisterLambda(c, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{c, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterLambda", reflect.TypeOf((*MockAmazon)(nil).RegisterLambda), varargs...)
}
