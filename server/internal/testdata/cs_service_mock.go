// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package testdata is a generated GoMock package.
package testdata

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCSservice is a mock of CSservice interface.
type MockCSservice struct {
	ctrl     *gomock.Controller
	recorder *MockCSserviceMockRecorder
}

// MockCSserviceMockRecorder is the mock recorder for MockCSservice.
type MockCSserviceMockRecorder struct {
	mock *MockCSservice
}

// NewMockCSservice creates a new mock instance.
func NewMockCSservice(ctrl *gomock.Controller) *MockCSservice {
	mock := &MockCSservice{ctrl: ctrl}
	mock.recorder = &MockCSserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSservice) EXPECT() *MockCSserviceMockRecorder {
	return m.recorder
}

// CubeSignerToken mocks base method.
func (m *MockCSservice) CubeSignerToken(c context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CubeSignerToken", c)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CubeSignerToken indicates an expected call of CubeSignerToken.
func (mr *MockCSserviceMockRecorder) CubeSignerToken(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CubeSignerToken", reflect.TypeOf((*MockCSservice)(nil).CubeSignerToken), c)
}

// GetSecRole mocks base method.
func (m *MockCSservice) GetSecRole(c context.Context, secret string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecRole", c, secret)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecRole indicates an expected call of GetSecRole.
func (mr *MockCSserviceMockRecorder) GetSecRole(c, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecRole", reflect.TypeOf((*MockCSservice)(nil).GetSecRole), c, secret)
}
