// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package testdata is a generated GoMock package.
package testdata

import (
	context "context"
	reflect "reflect"

	dto "github.com/57blocks/auto-action/server/internal/dto"
	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
)

// MockLambdaService is a mock of LambdaService interface.
type MockLambdaService struct {
	ctrl     *gomock.Controller
	recorder *MockLambdaServiceMockRecorder
}

// MockLambdaServiceMockRecorder is the mock recorder for MockLambdaService.
type MockLambdaServiceMockRecorder struct {
	mock *MockLambdaService
}

// NewMockLambdaService creates a new mock instance.
func NewMockLambdaService(ctrl *gomock.Controller) *MockLambdaService {
	mock := &MockLambdaService{ctrl: ctrl}
	mock.recorder = &MockLambdaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLambdaService) EXPECT() *MockLambdaServiceMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockLambdaService) Info(c context.Context, r *dto.ReqURILambda) (*dto.RespInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", c, r)
	ret0, _ := ret[0].(*dto.RespInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockLambdaServiceMockRecorder) Info(c, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLambdaService)(nil).Info), c, r)
}

// Invoke mocks base method.
func (m *MockLambdaService) Invoke(c context.Context, r *dto.ReqInvoke) (*dto.RespInvoke, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", c, r)
	ret0, _ := ret[0].(*dto.RespInvoke)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockLambdaServiceMockRecorder) Invoke(c, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockLambdaService)(nil).Invoke), c, r)
}

// List mocks base method.
func (m *MockLambdaService) List(c context.Context, isFull bool) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", c, isFull)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLambdaServiceMockRecorder) List(c, isFull interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLambdaService)(nil).List), c, isFull)
}

// Logs mocks base method.
func (m *MockLambdaService) Logs(c context.Context, r *dto.ReqURILambda, upgrader *websocket.Upgrader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", c, r, upgrader)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logs indicates an expected call of Logs.
func (mr *MockLambdaServiceMockRecorder) Logs(c, r, upgrader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockLambdaService)(nil).Logs), c, r, upgrader)
}

// Register mocks base method.
func (m *MockLambdaService) Register(c context.Context, r *dto.ReqRegister) ([]*dto.RespRegister, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", c, r)
	ret0, _ := ret[0].([]*dto.RespRegister)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockLambdaServiceMockRecorder) Register(c, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockLambdaService)(nil).Register), c, r)
}

// Remove mocks base method.
func (m *MockLambdaService) Remove(c context.Context, r *dto.ReqURILambda) (*dto.RespRemove, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", c, r)
	ret0, _ := ret[0].(*dto.RespRemove)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockLambdaServiceMockRecorder) Remove(c, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockLambdaService)(nil).Remove), c, r)
}
