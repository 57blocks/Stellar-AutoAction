// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package oauth is a generated GoMock package.
package oauth

import (
	context "context"
	reflect "reflect"

	dto "github.com/57blocks/auto-action/server/internal/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockService) Login(c context.Context, req dto.ReqLogin) (*dto.RespCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", c, req)
	ret0, _ := ret[0].(*dto.RespCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceMockRecorder) Login(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), c, req)
}

// Logout mocks base method.
func (m *MockService) Logout(c context.Context, raw string) (*dto.RespLogout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", c, raw)
	ret0, _ := ret[0].(*dto.RespLogout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockServiceMockRecorder) Logout(c, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockService)(nil).Logout), c, raw)
}

// Refresh mocks base method.
func (m *MockService) Refresh(c context.Context, raw string) (*dto.RespCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", c, raw)
	ret0, _ := ret[0].(*dto.RespCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockServiceMockRecorder) Refresh(c, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockService)(nil).Refresh), c, raw)
}

// Signup mocks base method.
func (m *MockService) Signup(c context.Context, req dto.ReqSignup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", c, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockServiceMockRecorder) Signup(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockService)(nil).Signup), c, req)
}
