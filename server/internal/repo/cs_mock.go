// Code generated by MockGen. DO NOT EDIT.
// Source: cs.go

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	dto "github.com/57blocks/auto-action/server/internal/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockCubeSigner is a mock of CubeSigner interface.
type MockCubeSigner struct {
	ctrl     *gomock.Controller
	recorder *MockCubeSignerMockRecorder
}

// MockCubeSignerMockRecorder is the mock recorder for MockCubeSigner.
type MockCubeSignerMockRecorder struct {
	mock *MockCubeSigner
}

// NewMockCubeSigner creates a new mock instance.
func NewMockCubeSigner(ctrl *gomock.Controller) *MockCubeSigner {
	mock := &MockCubeSigner{ctrl: ctrl}
	mock.recorder = &MockCubeSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCubeSigner) EXPECT() *MockCubeSignerMockRecorder {
	return m.recorder
}

// ToSign mocks base method.
func (m *MockCubeSigner) ToSign(c context.Context, req *dto.ReqToSign) ([]*dto.RespToSign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSign", c, req)
	ret0, _ := ret[0].([]*dto.RespToSign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToSign indicates an expected call of ToSign.
func (mr *MockCubeSignerMockRecorder) ToSign(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSign", reflect.TypeOf((*MockCubeSigner)(nil).ToSign), c, req)
}
